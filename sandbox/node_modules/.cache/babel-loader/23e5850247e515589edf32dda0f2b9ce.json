{"ast":null,"code":"var _jsxFileName = \"/Users/kamachekhin/code/markdown-textarea/sandbox/src/examples/Advanced.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useRef, useState } from \"react\";\nimport TextareaMarkdownEditor, { Cursor } from \"textarea-markdown-editor\";\n/** Inserts ðŸ™ƒ at the end of the line and select it */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emojiCommandHandler = ({\n  element\n}) => {\n  const cursor = new Cursor(element);\n  const currentLine = cursor.getLine(); // Cursor.$ - marker means cursor position, if specified two markers indicate a selection range\n\n  cursor.spliceContent(Cursor.raw`${currentLine} ${Cursor.$}ðŸ™ƒ${Cursor.$}`, {\n    replaceCount: 1 // replace current line\n\n  });\n};\n\nfunction App() {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const ref = useRef(null);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        var _ref$current;\n\n        return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.trigger(\"insert-emoji\");\n      },\n      children: \"Insert \\uD83D\\uDE43\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextareaMarkdownEditor, {\n      ref: ref,\n      value: value,\n      onChange: e => setValue(e.target.value),\n      commands: [{\n        name: \"insert-emoji\",\n        handler: emojiCommandHandler\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"6TC6TBI+8qoVL2vhsZjbxnzgk2s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kamachekhin/code/markdown-textarea/sandbox/src/examples/Advanced.tsx"],"names":["React","Fragment","useRef","useState","TextareaMarkdownEditor","Cursor","emojiCommandHandler","element","cursor","currentLine","getLine","spliceContent","raw","$","replaceCount","App","value","setValue","ref","current","trigger","e","target","name","handler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAkD,OAAlD;AACA,OAAOC,sBAAP,IAA4DC,MAA5D,QAA0F,0BAA1F;AAEA;;;;AACA,MAAMC,mBAAmC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACzD,QAAMC,MAAM,GAAG,IAAIH,MAAJ,CAAWE,OAAX,CAAf;AACA,QAAME,WAAW,GAAGD,MAAM,CAACE,OAAP,EAApB,CAFyD,CAIzD;;AACAF,EAAAA,MAAM,CAACG,aAAP,CAAqBN,MAAM,CAACO,GAAI,GAAEH,WAAY,IAAGJ,MAAM,CAACQ,CAAE,KAAIR,MAAM,CAACQ,CAAE,EAAvE,EAA0E;AACtEC,IAAAA,YAAY,EAAE,CADwD,CACrD;;AADqD,GAA1E;AAGH,CARD;;AAUA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMe,GAAG,GAAGhB,MAAM,CAA4B,IAA5B,CAAlB;AAEA,sBACI,QAAC,QAAD;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAE;AAAA;;AAAA,+BAAMgB,GAAG,CAACC,OAAV,iDAAM,aAAaC,OAAb,CAAqB,cAArB,CAAN;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,sBAAD;AACI,MAAA,GAAG,EAAEF,GADT;AAEI,MAAA,KAAK,EAAEF,KAFX;AAGI,MAAA,QAAQ,EAAGK,CAAD,IAAOJ,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASN,KAAV,CAH7B;AAII,MAAA,QAAQ,EAAE,CAAC;AAAEO,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAElB;AAAjC,OAAD;AAJd;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAfQS,G;;KAAAA,G;AAiBT,eAAeA,GAAf","sourcesContent":["import React, { Fragment, useRef, useState } from \"react\";\nimport TextareaMarkdownEditor, { TextareaMarkdownEditorRef, Cursor, CommandHandler } from \"textarea-markdown-editor\";\n\n/** Inserts ðŸ™ƒ at the end of the line and select it */\nconst emojiCommandHandler: CommandHandler = ({ element }) => {\n    const cursor = new Cursor(element);\n    const currentLine = cursor.getLine();\n\n    // Cursor.$ - marker means cursor position, if specified two markers indicate a selection range\n    cursor.spliceContent(Cursor.raw`${currentLine} ${Cursor.$}ðŸ™ƒ${Cursor.$}`, {\n        replaceCount: 1, // replace current line\n    });\n};\n\nfunction App() {\n    const [value, setValue] = useState(\"\");\n    const ref = useRef<TextareaMarkdownEditorRef>(null);\n\n    return (\n        <Fragment>\n            <button onClick={() => ref.current?.trigger(\"insert-emoji\")}>Insert ðŸ™ƒ</button>\n            <TextareaMarkdownEditor\n                ref={ref}\n                value={value}\n                onChange={(e) => setValue(e.target.value)}\n                commands={[{ name: \"insert-emoji\", handler: emojiCommandHandler }]}\n            />\n        </Fragment>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}