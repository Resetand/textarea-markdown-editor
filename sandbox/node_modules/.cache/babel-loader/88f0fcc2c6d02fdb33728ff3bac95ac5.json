{"ast":null,"code":"/*global define:false */\n\n/**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.5\n * @url craig.is/killing/mice\n */\n(function (window, document, undefined) {\n  // Check if mousetrap is used inside browser, if not, return\n  if (!window) {\n    return;\n  }\n  /**\n   * mapping of special keycodes to their corresponding keys\n   *\n   * everything in this dictionary cannot use keypress events\n   * so it has to be here to map to the correct keycodes for\n   * keyup/keydown events\n   *\n   * @type {Object}\n   */\n\n\n  var _MAP = {\n    8: 'backspace',\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    17: 'ctrl',\n    18: 'alt',\n    20: 'capslock',\n    27: 'esc',\n    32: 'space',\n    33: 'pageup',\n    34: 'pagedown',\n    35: 'end',\n    36: 'home',\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down',\n    45: 'ins',\n    46: 'del',\n    91: 'meta',\n    93: 'meta',\n    224: 'meta'\n  };\n  /**\n   * mapping for special characters so they can support\n   *\n   * this dictionary is only used incase you want to bind a\n   * keyup or keydown event to one of these keys\n   *\n   * @type {Object}\n   */\n\n  var _KEYCODE_MAP = {\n    106: '*',\n    107: '+',\n    109: '-',\n    110: '.',\n    111: '/',\n    186: ';',\n    187: '=',\n    188: ',',\n    189: '-',\n    190: '.',\n    191: '/',\n    192: '`',\n    219: '[',\n    220: '\\\\',\n    221: ']',\n    222: '\\''\n  };\n  /**\n   * this is a mapping of keys that require shift on a US keypad\n   * back to the non shift equivelents\n   *\n   * this is so you can use keyup events with these keys\n   *\n   * note that this will only work reliably on US keyboards\n   *\n   * @type {Object}\n   */\n\n  var _SHIFT_MAP = {\n    '~': '`',\n    '!': '1',\n    '@': '2',\n    '#': '3',\n    '$': '4',\n    '%': '5',\n    '^': '6',\n    '&': '7',\n    '*': '8',\n    '(': '9',\n    ')': '0',\n    '_': '-',\n    '+': '=',\n    ':': ';',\n    '\\\"': '\\'',\n    '<': ',',\n    '>': '.',\n    '?': '/',\n    '|': '\\\\'\n  };\n  /**\n   * this is a list of special strings you can use to map\n   * to modifier keys when you specify your keyboard shortcuts\n   *\n   * @type {Object}\n   */\n\n  var _SPECIAL_ALIASES = {\n    'option': 'alt',\n    'command': 'meta',\n    'return': 'enter',\n    'escape': 'esc',\n    'plus': '+',\n    'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n  };\n  /**\n   * variable to store the flipped version of _MAP from above\n   * needed to check if we should use keypress or not when no action\n   * is specified\n   *\n   * @type {Object|undefined}\n   */\n\n  var _REVERSE_MAP;\n  /**\n   * loop through the f keys, f1 to f19 and add them to the map\n   * programatically\n   */\n\n\n  for (var i = 1; i < 20; ++i) {\n    _MAP[111 + i] = 'f' + i;\n  }\n  /**\n   * loop through to map numbers on the numeric keypad\n   */\n\n\n  for (i = 0; i <= 9; ++i) {\n    // This needs to use a string cause otherwise since 0 is falsey\n    // mousetrap will never fire for numpad 0 pressed as part of a keydown\n    // event.\n    //\n    // @see https://github.com/ccampbell/mousetrap/pull/258\n    _MAP[i + 96] = i.toString();\n  }\n  /**\n   * cross browser add event method\n   *\n   * @param {Element|HTMLDocument} object\n   * @param {string} type\n   * @param {Function} callback\n   * @returns void\n   */\n\n\n  function _addEvent(object, type, callback) {\n    if (object.addEventListener) {\n      object.addEventListener(type, callback, false);\n      return;\n    }\n\n    object.attachEvent('on' + type, callback);\n  }\n  /**\n   * takes the event and returns the key character\n   *\n   * @param {Event} e\n   * @return {string}\n   */\n\n\n  function _characterFromEvent(e) {\n    // for keypress events we should return the character as is\n    if (e.type == 'keypress') {\n      var character = String.fromCharCode(e.which); // if the shift key is not pressed then it is safe to assume\n      // that we want the character to be lowercase.  this means if\n      // you accidentally have caps lock on then your key bindings\n      // will continue to work\n      //\n      // the only side effect that might not be desired is if you\n      // bind something like 'A' cause you want to trigger an\n      // event when capital A is pressed caps lock will no longer\n      // trigger the event.  shift+a will though.\n\n      if (!e.shiftKey) {\n        character = character.toLowerCase();\n      }\n\n      return character;\n    } // for non keypress events the special maps are needed\n\n\n    if (_MAP[e.which]) {\n      return _MAP[e.which];\n    }\n\n    if (_KEYCODE_MAP[e.which]) {\n      return _KEYCODE_MAP[e.which];\n    } // if it is not in the special map\n    // with keydown and keyup events the character seems to always\n    // come in as an uppercase character whether you are pressing shift\n    // or not.  we should make sure it is always lowercase for comparisons\n\n\n    return String.fromCharCode(e.which).toLowerCase();\n  }\n  /**\n   * checks if two arrays are equal\n   *\n   * @param {Array} modifiers1\n   * @param {Array} modifiers2\n   * @returns {boolean}\n   */\n\n\n  function _modifiersMatch(modifiers1, modifiers2) {\n    return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n  }\n  /**\n   * takes a key event and figures out what the modifiers are\n   *\n   * @param {Event} e\n   * @returns {Array}\n   */\n\n\n  function _eventModifiers(e) {\n    var modifiers = [];\n\n    if (e.shiftKey) {\n      modifiers.push('shift');\n    }\n\n    if (e.altKey) {\n      modifiers.push('alt');\n    }\n\n    if (e.ctrlKey) {\n      modifiers.push('ctrl');\n    }\n\n    if (e.metaKey) {\n      modifiers.push('meta');\n    }\n\n    return modifiers;\n  }\n  /**\n   * prevents default for this event\n   *\n   * @param {Event} e\n   * @returns void\n   */\n\n\n  function _preventDefault(e) {\n    if (e.preventDefault) {\n      e.preventDefault();\n      return;\n    }\n\n    e.returnValue = false;\n  }\n  /**\n   * stops propogation for this event\n   *\n   * @param {Event} e\n   * @returns void\n   */\n\n\n  function _stopPropagation(e) {\n    if (e.stopPropagation) {\n      e.stopPropagation();\n      return;\n    }\n\n    e.cancelBubble = true;\n  }\n  /**\n   * determines if the keycode specified is a modifier key or not\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n\n\n  function _isModifier(key) {\n    return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n  }\n  /**\n   * reverses the map lookup so that we can look for specific keys\n   * to see what can and can't use keypress\n   *\n   * @return {Object}\n   */\n\n\n  function _getReverseMap() {\n    if (!_REVERSE_MAP) {\n      _REVERSE_MAP = {};\n\n      for (var key in _MAP) {\n        // pull out the numeric keypad from here cause keypress should\n        // be able to detect the keys from the character\n        if (key > 95 && key < 112) {\n          continue;\n        }\n\n        if (_MAP.hasOwnProperty(key)) {\n          _REVERSE_MAP[_MAP[key]] = key;\n        }\n      }\n    }\n\n    return _REVERSE_MAP;\n  }\n  /**\n   * picks the best action based on the key combination\n   *\n   * @param {string} key - character for key\n   * @param {Array} modifiers\n   * @param {string=} action passed in\n   */\n\n\n  function _pickBestAction(key, modifiers, action) {\n    // if no action was picked in we should try to pick the one\n    // that we think would work best for this key\n    if (!action) {\n      action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n    } // modifier keys don't work as expected with keypress,\n    // switch to keydown\n\n\n    if (action == 'keypress' && modifiers.length) {\n      action = 'keydown';\n    }\n\n    return action;\n  }\n  /**\n   * Converts from a string key combination to an array\n   *\n   * @param  {string} combination like \"command+shift+l\"\n   * @return {Array}\n   */\n\n\n  function _keysFromString(combination) {\n    if (combination === '+') {\n      return ['+'];\n    }\n\n    combination = combination.replace(/\\+{2}/g, '+plus');\n    return combination.split('+');\n  }\n  /**\n   * Gets info for a specific key combination\n   *\n   * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n   * @param  {string=} action\n   * @returns {Object}\n   */\n\n\n  function _getKeyInfo(combination, action) {\n    var keys;\n    var key;\n    var i;\n    var modifiers = []; // take the keys from this pattern and figure out what the actual\n    // pattern is all about\n\n    keys = _keysFromString(combination);\n\n    for (i = 0; i < keys.length; ++i) {\n      key = keys[i]; // normalize key names\n\n      if (_SPECIAL_ALIASES[key]) {\n        key = _SPECIAL_ALIASES[key];\n      } // if this is not a keypress event then we should\n      // be smart about using shift keys\n      // this will only work for US keyboards however\n\n\n      if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n        key = _SHIFT_MAP[key];\n        modifiers.push('shift');\n      } // if this key is a modifier then add it to the list of modifiers\n\n\n      if (_isModifier(key)) {\n        modifiers.push(key);\n      }\n    } // depending on what the key combination is\n    // we will try to pick the best event for it\n\n\n    action = _pickBestAction(key, modifiers, action);\n    return {\n      key: key,\n      modifiers: modifiers,\n      action: action\n    };\n  }\n\n  function _belongsTo(element, ancestor) {\n    if (element === null || element === document) {\n      return false;\n    }\n\n    if (element === ancestor) {\n      return true;\n    }\n\n    return _belongsTo(element.parentNode, ancestor);\n  }\n\n  function Mousetrap(targetElement) {\n    var self = this;\n    targetElement = targetElement || document;\n\n    if (!(self instanceof Mousetrap)) {\n      return new Mousetrap(targetElement);\n    }\n    /**\n     * element to attach key events to\n     *\n     * @type {Element}\n     */\n\n\n    self.target = targetElement;\n    /**\n     * a list of all the callbacks setup via Mousetrap.bind()\n     *\n     * @type {Object}\n     */\n\n    self._callbacks = {};\n    /**\n     * direct map of string combinations to callbacks used for trigger()\n     *\n     * @type {Object}\n     */\n\n    self._directMap = {};\n    /**\n     * keeps track of what level each sequence is at since multiple\n     * sequences can start out with the same sequence\n     *\n     * @type {Object}\n     */\n\n    var _sequenceLevels = {};\n    /**\n     * variable to store the setTimeout call\n     *\n     * @type {null|number}\n     */\n\n    var _resetTimer;\n    /**\n     * temporary state where we will ignore the next keyup\n     *\n     * @type {boolean|string}\n     */\n\n\n    var _ignoreNextKeyup = false;\n    /**\n     * temporary state where we will ignore the next keypress\n     *\n     * @type {boolean}\n     */\n\n    var _ignoreNextKeypress = false;\n    /**\n     * are we currently inside of a sequence?\n     * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n     *\n     * @type {boolean|string}\n     */\n\n    var _nextExpectedAction = false;\n    /**\n     * resets all sequence counters except for the ones passed in\n     *\n     * @param {Object} doNotReset\n     * @returns void\n     */\n\n    function _resetSequences(doNotReset) {\n      doNotReset = doNotReset || {};\n      var activeSequences = false,\n          key;\n\n      for (key in _sequenceLevels) {\n        if (doNotReset[key]) {\n          activeSequences = true;\n          continue;\n        }\n\n        _sequenceLevels[key] = 0;\n      }\n\n      if (!activeSequences) {\n        _nextExpectedAction = false;\n      }\n    }\n    /**\n     * finds all callbacks that match based on the keycode, modifiers,\n     * and action\n     *\n     * @param {string} character\n     * @param {Array} modifiers\n     * @param {Event|Object} e\n     * @param {string=} sequenceName - name of the sequence we are looking for\n     * @param {string=} combination\n     * @param {number=} level\n     * @returns {Array}\n     */\n\n\n    function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n      var i;\n      var callback;\n      var matches = [];\n      var action = e.type; // if there are no events related to this keycode\n\n      if (!self._callbacks[character]) {\n        return [];\n      } // if a modifier key is coming up on its own we should allow it\n\n\n      if (action == 'keyup' && _isModifier(character)) {\n        modifiers = [character];\n      } // loop through all callbacks for the key that was pressed\n      // and see if any of them match\n\n\n      for (i = 0; i < self._callbacks[character].length; ++i) {\n        callback = self._callbacks[character][i]; // if a sequence name is not specified, but this is a sequence at\n        // the wrong level then move onto the next match\n\n        if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n          continue;\n        } // if the action we are looking for doesn't match the action we got\n        // then we should keep going\n\n\n        if (action != callback.action) {\n          continue;\n        } // if this is a keypress event and the meta key and control key\n        // are not pressed that means that we need to only look at the\n        // character, otherwise check the modifiers as well\n        //\n        // chrome will not fire a keypress if meta or control is down\n        // safari will fire a keypress if meta or meta+shift is down\n        // firefox will fire a keypress if meta or control is down\n\n\n        if (action == 'keypress' && !e.metaKey && !e.ctrlKey || _modifiersMatch(modifiers, callback.modifiers)) {\n          // when you bind a combination or sequence a second time it\n          // should overwrite the first one.  if a sequenceName or\n          // combination is specified in this call it does just that\n          //\n          // @todo make deleting its own method?\n          var deleteCombo = !sequenceName && callback.combo == combination;\n          var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n\n          if (deleteCombo || deleteSequence) {\n            self._callbacks[character].splice(i, 1);\n          }\n\n          matches.push(callback);\n        }\n      }\n\n      return matches;\n    }\n    /**\n     * actually calls the callback function\n     *\n     * if your callback function returns false this will use the jquery\n     * convention - prevent default and stop propogation on the event\n     *\n     * @param {Function} callback\n     * @param {Event} e\n     * @returns void\n     */\n\n\n    function _fireCallback(callback, e, combo, sequence) {\n      // if this event should not happen stop here\n      if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n        return;\n      }\n\n      if (callback(e, combo) === false) {\n        _preventDefault(e);\n\n        _stopPropagation(e);\n      }\n    }\n    /**\n     * handles a character key event\n     *\n     * @param {string} character\n     * @param {Array} modifiers\n     * @param {Event} e\n     * @returns void\n     */\n\n\n    self._handleKey = function (character, modifiers, e) {\n      var callbacks = _getMatches(character, modifiers, e);\n\n      var i;\n      var doNotReset = {};\n      var maxLevel = 0;\n      var processedSequenceCallback = false; // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n\n      for (i = 0; i < callbacks.length; ++i) {\n        if (callbacks[i].seq) {\n          maxLevel = Math.max(maxLevel, callbacks[i].level);\n        }\n      } // loop through matching callbacks for this key event\n\n\n      for (i = 0; i < callbacks.length; ++i) {\n        // fire for all sequence callbacks\n        // this is because if for example you have multiple sequences\n        // bound such as \"g i\" and \"g t\" they both need to fire the\n        // callback for matching g cause otherwise you can only ever\n        // match the first one\n        if (callbacks[i].seq) {\n          // only fire callbacks for the maxLevel to prevent\n          // subsequences from also firing\n          //\n          // for example 'a option b' should not cause 'option b' to fire\n          // even though 'option b' is part of the other sequence\n          //\n          // any sequences that do not match here will be discarded\n          // below by the _resetSequences call\n          if (callbacks[i].level != maxLevel) {\n            continue;\n          }\n\n          processedSequenceCallback = true; // keep a list of which sequences were matches for later\n\n          doNotReset[callbacks[i].seq] = 1;\n\n          _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n\n          continue;\n        } // if there were no sequence matches but we are still here\n        // that means this is a regular match so we should fire that\n\n\n        if (!processedSequenceCallback) {\n          _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n        }\n      } // if the key you pressed matches the type of sequence without\n      // being a modifier (ie \"keyup\" or \"keypress\") then we should\n      // reset all sequences that were not matched by this event\n      //\n      // this is so, for example, if you have the sequence \"h a t\" and you\n      // type \"h e a r t\" it does not match.  in this case the \"e\" will\n      // cause the sequence to reset\n      //\n      // modifier keys are ignored because you can have a sequence\n      // that contains modifiers such as \"enter ctrl+space\" and in most\n      // cases the modifier key will be pressed before the next key\n      //\n      // also if you have a sequence such as \"ctrl+b a\" then pressing the\n      // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n      //\n      // the \"keydown\" is expected when there is a modifier, but the\n      // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n      // after and that causes the sequence to reset\n      //\n      // we ignore keypresses in a sequence that directly follow a keydown\n      // for the same character\n\n\n      var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n\n      if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n        _resetSequences(doNotReset);\n      }\n\n      _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n    };\n    /**\n     * handles a keydown event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n\n\n    function _handleKeyEvent(e) {\n      // normalize e.which for key events\n      // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n      if (typeof e.which !== 'number') {\n        e.which = e.keyCode;\n      }\n\n      var character = _characterFromEvent(e); // no character found then stop\n\n\n      if (!character) {\n        return;\n      } // need to use === for the character check because the character can be 0\n\n\n      if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n        _ignoreNextKeyup = false;\n        return;\n      }\n\n      self.handleKey(character, _eventModifiers(e), e);\n    }\n    /**\n     * called to set a 1 second timeout on the specified sequence\n     *\n     * this is so after each key press in the sequence you have 1 second\n     * to press the next key before you have to start over\n     *\n     * @returns void\n     */\n\n\n    function _resetSequenceTimer() {\n      clearTimeout(_resetTimer);\n      _resetTimer = setTimeout(_resetSequences, 1000);\n    }\n    /**\n     * binds a key sequence to an event\n     *\n     * @param {string} combo - combo specified in bind call\n     * @param {Array} keys\n     * @param {Function} callback\n     * @param {string=} action\n     * @returns void\n     */\n\n\n    function _bindSequence(combo, keys, callback, action) {\n      // start off by adding a sequence level record for this combination\n      // and setting the level to 0\n      _sequenceLevels[combo] = 0;\n      /**\n       * callback to increase the sequence level for this sequence and reset\n       * all other sequences that were active\n       *\n       * @param {string} nextAction\n       * @returns {Function}\n       */\n\n      function _increaseSequence(nextAction) {\n        return function () {\n          _nextExpectedAction = nextAction;\n          ++_sequenceLevels[combo];\n\n          _resetSequenceTimer();\n        };\n      }\n      /**\n       * wraps the specified callback inside of another function in order\n       * to reset all sequence counters as soon as this sequence is done\n       *\n       * @param {Event} e\n       * @returns void\n       */\n\n\n      function _callbackAndReset(e) {\n        _fireCallback(callback, e, combo); // we should ignore the next key up if the action is key down\n        // or keypress.  this is so if you finish a sequence and\n        // release the key the final key will not trigger a keyup\n\n\n        if (action !== 'keyup') {\n          _ignoreNextKeyup = _characterFromEvent(e);\n        } // weird race condition if a sequence ends with the key\n        // another sequence begins with\n\n\n        setTimeout(_resetSequences, 10);\n      } // loop through keys one at a time and bind the appropriate callback\n      // function.  for any key leading up to the final one it should\n      // increase the sequence. after the final, it should reset all sequences\n      //\n      // if an action is specified in the original bind call then that will\n      // be used throughout.  otherwise we will pass the action that the\n      // next key in the sequence should match.  this allows a sequence\n      // to mix and match keypress and keydown events depending on which\n      // ones are better suited to the key provided\n\n\n      for (var i = 0; i < keys.length; ++i) {\n        var isFinal = i + 1 === keys.length;\n        var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n\n        _bindSingle(keys[i], wrappedCallback, action, combo, i);\n      }\n    }\n    /**\n     * binds a single keyboard combination\n     *\n     * @param {string} combination\n     * @param {Function} callback\n     * @param {string=} action\n     * @param {string=} sequenceName - name of sequence if part of sequence\n     * @param {number=} level - what part of the sequence the command is\n     * @returns void\n     */\n\n\n    function _bindSingle(combination, callback, action, sequenceName, level) {\n      // store a direct mapped reference for use with Mousetrap.trigger\n      self._directMap[combination + ':' + action] = callback; // make sure multiple spaces in a row become a single space\n\n      combination = combination.replace(/\\s+/g, ' ');\n      var sequence = combination.split(' ');\n      var info; // if this pattern is a sequence of keys then run through this method\n      // to reprocess each pattern one key at a time\n\n      if (sequence.length > 1) {\n        _bindSequence(combination, sequence, callback, action);\n\n        return;\n      }\n\n      info = _getKeyInfo(combination, action); // make sure to initialize array if this is the first time\n      // a callback is added for this key\n\n      self._callbacks[info.key] = self._callbacks[info.key] || []; // remove an existing match if there is one\n\n      _getMatches(info.key, info.modifiers, {\n        type: info.action\n      }, sequenceName, combination, level); // add this call back to the array\n      // if it is a sequence put it at the beginning\n      // if not put it at the end\n      //\n      // this is important because the way these are processed expects\n      // the sequence ones to come first\n\n\n      self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n        callback: callback,\n        modifiers: info.modifiers,\n        action: info.action,\n        seq: sequenceName,\n        level: level,\n        combo: combination\n      });\n    }\n    /**\n     * binds multiple combinations to the same callback\n     *\n     * @param {Array} combinations\n     * @param {Function} callback\n     * @param {string|undefined} action\n     * @returns void\n     */\n\n\n    self._bindMultiple = function (combinations, callback, action) {\n      for (var i = 0; i < combinations.length; ++i) {\n        _bindSingle(combinations[i], callback, action);\n      }\n    }; // start!\n\n\n    _addEvent(targetElement, 'keypress', _handleKeyEvent);\n\n    _addEvent(targetElement, 'keydown', _handleKeyEvent);\n\n    _addEvent(targetElement, 'keyup', _handleKeyEvent);\n  }\n  /**\n   * binds an event to mousetrap\n   *\n   * can be a single key, a combination of keys separated with +,\n   * an array of keys, or a sequence of keys separated by spaces\n   *\n   * be sure to list the modifier keys first to make sure that the\n   * correct key ends up getting bound (the last key in the pattern)\n   *\n   * @param {string|Array} keys\n   * @param {Function} callback\n   * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.bind = function (keys, callback, action) {\n    var self = this;\n    keys = keys instanceof Array ? keys : [keys];\n\n    self._bindMultiple.call(self, keys, callback, action);\n\n    return self;\n  };\n  /**\n   * unbinds an event to mousetrap\n   *\n   * the unbinding sets the callback function of the specified key combo\n   * to an empty function and deletes the corresponding key in the\n   * _directMap dict.\n   *\n   * TODO: actually remove this from the _callbacks dictionary instead\n   * of binding an empty function\n   *\n   * the keycombo+action has to be exactly the same as\n   * it was defined in the bind method\n   *\n   * @param {string|Array} keys\n   * @param {string} action\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.unbind = function (keys, action) {\n    var self = this;\n    return self.bind.call(self, keys, function () {}, action);\n  };\n  /**\n   * triggers an event that has already been bound\n   *\n   * @param {string} keys\n   * @param {string=} action\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.trigger = function (keys, action) {\n    var self = this;\n\n    if (self._directMap[keys + ':' + action]) {\n      self._directMap[keys + ':' + action]({}, keys);\n    }\n\n    return self;\n  };\n  /**\n   * resets the library back to its initial state.  this is useful\n   * if you want to clear out the current keyboard shortcuts and bind\n   * new ones - for example if you switch to another page\n   *\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.reset = function () {\n    var self = this;\n    self._callbacks = {};\n    self._directMap = {};\n    return self;\n  };\n  /**\n   * should we stop this event before firing off callbacks\n   *\n   * @param {Event} e\n   * @param {Element} element\n   * @return {boolean}\n   */\n\n\n  Mousetrap.prototype.stopCallback = function (e, element) {\n    var self = this; // if the element has the class \"mousetrap\" then no need to stop\n\n    if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n      return false;\n    }\n\n    if (_belongsTo(element, self.target)) {\n      return false;\n    } // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n    // not the initial event target in the shadow tree. Note that not all events cross the\n    // shadow boundary.\n    // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n    // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n    // target cannot be obtained.\n\n\n    if ('composedPath' in e && typeof e.composedPath === 'function') {\n      // For open shadow trees, update `element` so that the following check works.\n      var initialEventTarget = e.composedPath()[0];\n\n      if (initialEventTarget !== e.target) {\n        element = initialEventTarget;\n      }\n    } // stop for input, select, and textarea\n\n\n    return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n  };\n  /**\n   * exposes _handleKey publicly so it can be overwritten by extensions\n   */\n\n\n  Mousetrap.prototype.handleKey = function () {\n    var self = this;\n    return self._handleKey.apply(self, arguments);\n  };\n  /**\n   * allow custom key mappings\n   */\n\n\n  Mousetrap.addKeycodes = function (object) {\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        _MAP[key] = object[key];\n      }\n    }\n\n    _REVERSE_MAP = null;\n  };\n  /**\n   * Init the global mousetrap functions\n   *\n   * This method is needed to allow the global mousetrap functions to work\n   * now that mousetrap is a constructor function.\n   */\n\n\n  Mousetrap.init = function () {\n    var documentMousetrap = Mousetrap(document);\n\n    for (var method in documentMousetrap) {\n      if (method.charAt(0) !== '_') {\n        Mousetrap[method] = function (method) {\n          return function () {\n            return documentMousetrap[method].apply(documentMousetrap, arguments);\n          };\n        }(method);\n      }\n    }\n  };\n\n  Mousetrap.init(); // expose mousetrap to the global object\n\n  window.Mousetrap = Mousetrap; // expose as a common js module\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Mousetrap;\n  } // expose mousetrap as an AMD module\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Mousetrap;\n    });\n  }\n})(typeof window !== 'undefined' ? window : null, typeof window !== 'undefined' ? document : null);","map":{"version":3,"sources":["/Users/kamachekhin/code/markdown-textarea/node_modules/mousetrap/mousetrap.js"],"names":["window","document","undefined","_MAP","_KEYCODE_MAP","_SHIFT_MAP","_SPECIAL_ALIASES","test","navigator","platform","_REVERSE_MAP","i","toString","_addEvent","object","type","callback","addEventListener","attachEvent","_characterFromEvent","e","character","String","fromCharCode","which","shiftKey","toLowerCase","_modifiersMatch","modifiers1","modifiers2","sort","join","_eventModifiers","modifiers","push","altKey","ctrlKey","metaKey","_preventDefault","preventDefault","returnValue","_stopPropagation","stopPropagation","cancelBubble","_isModifier","key","_getReverseMap","hasOwnProperty","_pickBestAction","action","length","_keysFromString","combination","replace","split","_getKeyInfo","keys","_belongsTo","element","ancestor","parentNode","Mousetrap","targetElement","self","target","_callbacks","_directMap","_sequenceLevels","_resetTimer","_ignoreNextKeyup","_ignoreNextKeypress","_nextExpectedAction","_resetSequences","doNotReset","activeSequences","_getMatches","sequenceName","level","matches","seq","deleteCombo","combo","deleteSequence","splice","_fireCallback","sequence","stopCallback","srcElement","_handleKey","callbacks","maxLevel","processedSequenceCallback","Math","max","ignoreThisKeypress","_handleKeyEvent","keyCode","handleKey","_resetSequenceTimer","clearTimeout","setTimeout","_bindSequence","_increaseSequence","nextAction","_callbackAndReset","isFinal","wrappedCallback","_bindSingle","info","_bindMultiple","combinations","prototype","bind","Array","call","unbind","trigger","reset","className","indexOf","composedPath","initialEventTarget","tagName","isContentEditable","apply","arguments","addKeycodes","init","documentMousetrap","method","charAt","module","exports","define","amd"],"mappings":"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","sourcesContent":["/*global define:false */\n/**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.5\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    // Check if mousetrap is used inside browser, if not, return\n    if (!window) {\n        return;\n    }\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n        8: 'backspace',\n        9: 'tab',\n        13: 'enter',\n        16: 'shift',\n        17: 'ctrl',\n        18: 'alt',\n        20: 'capslock',\n        27: 'esc',\n        32: 'space',\n        33: 'pageup',\n        34: 'pagedown',\n        35: 'end',\n        36: 'home',\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        45: 'ins',\n        46: 'del',\n        91: 'meta',\n        93: 'meta',\n        224: 'meta'\n    };\n\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n    var _KEYCODE_MAP = {\n        106: '*',\n        107: '+',\n        109: '-',\n        110: '.',\n        111 : '/',\n        186: ';',\n        187: '=',\n        188: ',',\n        189: '-',\n        190: '.',\n        191: '/',\n        192: '`',\n        219: '[',\n        220: '\\\\',\n        221: ']',\n        222: '\\''\n    };\n\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n    var _SHIFT_MAP = {\n        '~': '`',\n        '!': '1',\n        '@': '2',\n        '#': '3',\n        '$': '4',\n        '%': '5',\n        '^': '6',\n        '&': '7',\n        '*': '8',\n        '(': '9',\n        ')': '0',\n        '_': '-',\n        '+': '=',\n        ':': ';',\n        '\\\"': '\\'',\n        '<': ',',\n        '>': '.',\n        '?': '/',\n        '|': '\\\\'\n    };\n\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n    var _SPECIAL_ALIASES = {\n        'option': 'alt',\n        'command': 'meta',\n        'return': 'enter',\n        'escape': 'esc',\n        'plus': '+',\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n    var _REVERSE_MAP;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n\n        // This needs to use a string cause otherwise since 0 is falsey\n        // mousetrap will never fire for numpad 0 pressed as part of a keydown\n        // event.\n        //\n        // @see https://github.com/ccampbell/mousetrap/pull/258\n        _MAP[i + 96] = i.toString();\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        combination = combination.replace(/\\+{2}/g, '+plus');\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    function _belongsTo(element, ancestor) {\n        if (element === null || element === document) {\n            return false;\n        }\n\n        if (element === ancestor) {\n            return true;\n        }\n\n        return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n        var self = this;\n\n        targetElement = targetElement || document;\n\n        if (!(self instanceof Mousetrap)) {\n            return new Mousetrap(targetElement);\n        }\n\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */\n        self.target = targetElement;\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        self._callbacks = {};\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        self._directMap = {};\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        var _sequenceLevels = {};\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        var _resetTimer;\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        var _ignoreNextKeyup = false;\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        var _ignoreNextKeypress = false;\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        var _nextExpectedAction = false;\n\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */\n        function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n\n            var activeSequences = false,\n                key;\n\n            for (key in _sequenceLevels) {\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n\n            if (!activeSequences) {\n                _nextExpectedAction = false;\n            }\n        }\n\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) {\n                return [];\n            }\n\n            // if a modifier key is coming up on its own we should allow it\n            if (action == 'keyup' && _isModifier(character)) {\n                modifiers = [character];\n            }\n\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for (i = 0; i < self._callbacks[character].length; ++i) {\n                callback = self._callbacks[character][i];\n\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                    continue;\n                }\n\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) {\n                    continue;\n                }\n\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) {\n                        self._callbacks[character].splice(i, 1);\n                    }\n\n                    matches.push(callback);\n                }\n            }\n\n            return matches;\n        }\n\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */\n        function _fireCallback(callback, e, combo, sequence) {\n\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n                return;\n            }\n\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */\n        self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for (i = 0; i < callbacks.length; ++i) {\n                if (callbacks[i].seq) {\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\n                }\n            }\n\n            // loop through matching callbacks for this key event\n            for (i = 0; i < callbacks.length; ++i) {\n\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) {\n                        continue;\n                    }\n\n                    processedSequenceCallback = true;\n\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) {\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n                }\n            }\n\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n                _resetSequences(doNotReset);\n            }\n\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n        };\n\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _handleKeyEvent(e) {\n\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== 'number') {\n                e.which = e.keyCode;\n            }\n\n            var character = _characterFromEvent(e);\n\n            // no character found then stop\n            if (!character) {\n                return;\n            }\n\n            // need to use === for the character check because the character can be 0\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */\n        function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */\n        function _bindSequence(combo, keys, callback, action) {\n\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */\n            function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignoreNextKeyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for (var i = 0; i < keys.length; ++i) {\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */\n        function _bindSingle(combination, callback, action, sequenceName, level) {\n\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + ':' + action] = callback;\n\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, ' ');\n\n            var sequence = combination.split(' ');\n            var info;\n\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n\n            info = _getKeyInfo(combination, action);\n\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */\n        self._bindMultiple = function(combinations, callback, action) {\n            for (var i = 0; i < combinations.length; ++i) {\n                _bindSingle(combinations[i], callback, action);\n            }\n        };\n\n        // start!\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n    Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [keys];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n    Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n    Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + ':' + action]) {\n            self._directMap[keys + ':' + action]({}, keys);\n        }\n        return self;\n    };\n\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n    Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n    Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n            return false;\n        }\n\n        if (_belongsTo(element, self.target)) {\n            return false;\n        }\n\n        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n        // not the initial event target in the shadow tree. Note that not all events cross the\n        // shadow boundary.\n        // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n        // target cannot be obtained.\n        if ('composedPath' in e && typeof e.composedPath === 'function') {\n            // For open shadow trees, update `element` so that the following check works.\n            var initialEventTarget = e.composedPath()[0];\n            if (initialEventTarget !== e.target) {\n                element = initialEventTarget;\n            }\n        }\n\n        // stop for input, select, and textarea\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n    Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n\n    /**\n     * allow custom key mappings\n     */\n    Mousetrap.addKeycodes = function(object) {\n        for (var key in object) {\n            if (object.hasOwnProperty(key)) {\n                _MAP[key] = object[key];\n            }\n        }\n        _REVERSE_MAP = null;\n    };\n\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n    Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document);\n        for (var method in documentMousetrap) {\n            if (method.charAt(0) !== '_') {\n                Mousetrap[method] = (function(method) {\n                    return function() {\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\n                    };\n                } (method));\n            }\n        }\n    };\n\n    Mousetrap.init();\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose as a common js module\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = Mousetrap;\n    }\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Mousetrap;\n        });\n    }\n}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);\n"]},"metadata":{},"sourceType":"script"}